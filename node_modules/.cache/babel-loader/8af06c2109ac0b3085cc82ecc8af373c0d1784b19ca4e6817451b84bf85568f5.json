{"ast":null,"code":"/**\n * @name ranges-sort\n * @fileoverview Sort string index ranges\n * @version 6.0.8\n * @author Roy Revelt, Codsen Ltd\n * @license MIT\n * {@link https://codsen.com/os/ranges-sort/}\n */\n\nvar l = \"6.0.8\";\nvar y = l,\n  d = {\n    strictlyTwoElementsInRangeArrays: !1,\n    progressFn: null\n  };\nfunction g(t, u) {\n  if (!Array.isArray(t) || !t.length) return t;\n  let n = {\n      ...d,\n      ...u\n    },\n    s,\n    o;\n  if (n.strictlyTwoElementsInRangeArrays && !t.every((e, r) => !Array.isArray(e) || e.length !== 2 ? (s = r, o = e.length, !1) : !0)) throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${s}th range (${JSON.stringify(t[s], null, 4)}) has not two but ${o} elements!`);\n  if (!t.every((e, r) => !Array.isArray(e) || !Number.isInteger(e[0]) || e[0] < 0 || !Number.isInteger(e[1]) || e[1] < 0 ? (s = r, !1) : !0)) throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${s}th range (${JSON.stringify(t[s], null, 4)}) does not consist of only natural numbers!`);\n  let p = t.length ** 2,\n    i = 0;\n  return Array.from(t).sort((e, r) => (n.progressFn && (i += 1, n.progressFn(Math.floor(i * 100 / p))), e[0] === r[0] ? e[1] < r[1] ? -1 : e[1] > r[1] ? 1 : 0 : e[0] < r[0] ? -1 : 1));\n}\nexport { d as defaults, g as rSort, y as version };","map":{"version":3,"names":["l","y","d","strictlyTwoElementsInRangeArrays","progressFn","g","t","u","Array","isArray","length","n","s","o","every","e","r","TypeError","JSON","stringify","Number","isInteger","p","i","from","sort","Math","floor","defaults","rSort","version"],"sources":["/Users/isaacli/Desktop/MCI/dummyshop/node_modules/ranges-sort/dist/ranges-sort.esm.js"],"sourcesContent":["/**\n * @name ranges-sort\n * @fileoverview Sort string index ranges\n * @version 6.0.8\n * @author Roy Revelt, Codsen Ltd\n * @license MIT\n * {@link https://codsen.com/os/ranges-sort/}\n */\n\nvar l=\"6.0.8\";var y=l,d={strictlyTwoElementsInRangeArrays:!1,progressFn:null};function g(t,u){if(!Array.isArray(t)||!t.length)return t;let n={...d,...u},s,o;if(n.strictlyTwoElementsInRangeArrays&&!t.every((e,r)=>!Array.isArray(e)||e.length!==2?(s=r,o=e.length,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_03] The first argument should be an array and must consist of arrays which are natural number indexes representing TWO string index ranges. However, ${s}th range (${JSON.stringify(t[s],null,4)}) has not two but ${o} elements!`);if(!t.every((e,r)=>!Array.isArray(e)||!Number.isInteger(e[0])||e[0]<0||!Number.isInteger(e[1])||e[1]<0?(s=r,!1):!0))throw new TypeError(`ranges-sort: [THROW_ID_04] The first argument should be an array and must consist of arrays which are natural number indexes representing string index ranges. However, ${s}th range (${JSON.stringify(t[s],null,4)}) does not consist of only natural numbers!`);let p=t.length**2,i=0;return Array.from(t).sort((e,r)=>(n.progressFn&&(i+=1,n.progressFn(Math.floor(i*100/p))),e[0]===r[0]?e[1]<r[1]?-1:e[1]>r[1]?1:0:e[0]<r[0]?-1:1))}export{d as defaults,g as rSort,y as version};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,CAAC,GAAC,OAAO;AAAC,IAAIC,CAAC,GAACD,CAAC;EAACE,CAAC,GAAC;IAACC,gCAAgC,EAAC,CAAC,CAAC;IAACC,UAAU,EAAC;EAAI,CAAC;AAAC,SAASC,CAACA,CAACC,CAAC,EAACC,CAAC,EAAC;EAAC,IAAG,CAACC,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,IAAE,CAACA,CAAC,CAACI,MAAM,EAAC,OAAOJ,CAAC;EAAC,IAAIK,CAAC,GAAC;MAAC,GAAGT,CAAC;MAAC,GAAGK;IAAC,CAAC;IAACK,CAAC;IAACC,CAAC;EAAC,IAAGF,CAAC,CAACR,gCAAgC,IAAE,CAACG,CAAC,CAACQ,KAAK,CAAC,CAACC,CAAC,EAACC,CAAC,KAAG,CAACR,KAAK,CAACC,OAAO,CAACM,CAAC,CAAC,IAAEA,CAAC,CAACL,MAAM,KAAG,CAAC,IAAEE,CAAC,GAACI,CAAC,EAACH,CAAC,GAACE,CAAC,CAACL,MAAM,EAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,EAAC,MAAM,IAAIO,SAAS,CAAE,+KAA8KL,CAAE,aAAYM,IAAI,CAACC,SAAS,CAACb,CAAC,CAACM,CAAC,CAAC,EAAC,IAAI,EAAC,CAAC,CAAE,qBAAoBC,CAAE,YAAW,CAAC;EAAC,IAAG,CAACP,CAAC,CAACQ,KAAK,CAAC,CAACC,CAAC,EAACC,CAAC,KAAG,CAACR,KAAK,CAACC,OAAO,CAACM,CAAC,CAAC,IAAE,CAACK,MAAM,CAACC,SAAS,CAACN,CAAC,CAAC,CAAC,CAAC,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,IAAE,CAACK,MAAM,CAACC,SAAS,CAACN,CAAC,CAAC,CAAC,CAAC,CAAC,IAAEA,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,IAAEH,CAAC,GAACI,CAAC,EAAC,CAAC,CAAC,IAAE,CAAC,CAAC,CAAC,EAAC,MAAM,IAAIC,SAAS,CAAE,2KAA0KL,CAAE,aAAYM,IAAI,CAACC,SAAS,CAACb,CAAC,CAACM,CAAC,CAAC,EAAC,IAAI,EAAC,CAAC,CAAE,6CAA4C,CAAC;EAAC,IAAIU,CAAC,GAAChB,CAAC,CAACI,MAAM,IAAE,CAAC;IAACa,CAAC,GAAC,CAAC;EAAC,OAAOf,KAAK,CAACgB,IAAI,CAAClB,CAAC,CAAC,CAACmB,IAAI,CAAC,CAACV,CAAC,EAACC,CAAC,MAAIL,CAAC,CAACP,UAAU,KAAGmB,CAAC,IAAE,CAAC,EAACZ,CAAC,CAACP,UAAU,CAACsB,IAAI,CAACC,KAAK,CAACJ,CAAC,GAAC,GAAG,GAACD,CAAC,CAAC,CAAC,CAAC,EAACP,CAAC,CAAC,CAAC,CAAC,KAAGC,CAAC,CAAC,CAAC,CAAC,GAACD,CAAC,CAAC,CAAC,CAAC,GAACC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAACD,CAAC,CAAC,CAAC,CAAC,GAACC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAACD,CAAC,CAAC,CAAC,CAAC,GAACC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;AAAA;AAAC,SAAOd,CAAC,IAAI0B,QAAQ,EAACvB,CAAC,IAAIwB,KAAK,EAAC5B,CAAC,IAAI6B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}